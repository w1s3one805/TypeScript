//// [tests/cases/compiler/argumentsObjectIterator02_ES6.ts] ////

=== argumentsObjectIterator02_ES6.ts ===
function doubleAndReturnAsArray(x: number, y: number, z: number): [number, number, number] {
>doubleAndReturnAsArray : (x: number, y: number, z: number) => [number, number, number]
>                       : ^ ^^      ^^ ^^      ^^ ^^      ^^^^^                        
>x : number
>  : ^^^^^^
>y : number
>  : ^^^^^^
>z : number
>  : ^^^^^^

    let blah = arguments[Symbol.iterator];
>blah : () => BuiltinIterator<any, BuiltinIteratorReturn>
>     : ^^^^^^                                           
>arguments[Symbol.iterator] : () => BuiltinIterator<any, BuiltinIteratorReturn>
>                           : ^^^^^^                                           
>arguments : IArguments
>          : ^^^^^^^^^^
>Symbol.iterator : unique symbol
>                : ^^^^^^^^^^^^^
>Symbol : SymbolConstructor
>       : ^^^^^^^^^^^^^^^^^
>iterator : unique symbol
>         : ^^^^^^^^^^^^^

    let result = [];
>result : any[]
>       : ^^^^^
>[] : undefined[]
>   : ^^^^^^^^^^^

    for (let arg of blah()) {
>arg : any
>blah() : BuiltinIterator<any, any, any>
>       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>blah : () => BuiltinIterator<any, BuiltinIteratorReturn>
>     : ^^^^^^                                           

        result.push(arg + arg);
>result.push(arg + arg) : number
>                       : ^^^^^^
>result.push : (...items: any[]) => number
>            : ^^^^     ^^^^^^^^^^^^      
>result : any[]
>       : ^^^^^
>push : (...items: any[]) => number
>     : ^^^^     ^^^^^^^^^^^^      
>arg + arg : any
>arg : any
>arg : any
    }
    return <[any, any, any]>result;
><[any, any, any]>result : [any, any, any]
>                        : ^^^^^^^^^^^^^^^
>result : any[]
>       : ^^^^^
}


